# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
#  push:
#    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Spitup output
        run: |
          echo "Heres some output"
          echo $GITHUB_RUN_NUMBER
      - uses: actions/checkout@v2  
      - name: Setup .NET Core  
        uses: actions/setup-dotnet@v1  
        with:  
          dotnet-version: 3.1.101  
      - name: Install Nuget  
        uses: nuget/setup-nuget@v1
        with:
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
          nuget-version: '5.x'
      - name: Build  
        run: nuget pack ./cr-devops-rest.nuspec -Version 20.12.$GITHUB_RUN_NUMBER
      - name: AddGithubSource
        run: nuget sources Add -UserName Ryan.Phay@clearesult.com -Password ${{secrets.NUGET_API_KEY}} -Name CrDevOpsModules -Source https://clearesultdev.pkgs.visualstudio.com/_packaging/DevOps-PowerShell-Modules/nuget/v3/index.json
      - name: PushNuget
        run: nuget push ./cr-devops-rest.20.12.$GITHUB_RUN_NUMBER.nupkg -apikey ${{secrets.NUGET_API_KEY}} -source https://clearesultdev.pkgs.visualstudio.com/_packaging/DevOps-PowerShell-Modules/nuget/v3/index.json
      - name: Create Zip Folder
        run: mkdir ./zip
      - name: Zip
        uses: montudor/action-zip@v0.1.1
        with:
          args: zip -qq -r ./zip/cr-devops-rest.zip ./
      - name: Deploy to Azure
        uses: TravisSpomer/deploy-to-azure-storage@v1.3.0
        with:
          source-path: ./zip/
          sas-url: ${{ secrets.DEPLOY_SAS_URL }}
          container: devopsmodules
          require-index: false
          cleanup: false  
      - name: Install Azure PowerShell Module
        shell: pwsh
        run: Install-Module -Name Az -AllowClobber -Scope CurrentUser
      - name: Publish Module to Azure Automation
        shell: pwsh
        run: |
          Set-AzContext -SubscriptionId "${{ secrets.PRODUCTIONSUBSCRIPTIONID }}"
          $SAC = New-AzStorageContext -StorageAccountName "${{ secrets.StorageAccountName }}" -StorageAccountKey "${{ secrets.StorageAccountAccessKey }}"
          $URL = New-AzStorageBlobSASToken -Container "${{ secrets.BlobContainer }}" -Blob "${{secrets.ModuleName}}.zip" -Permission "rwd" -context $SAC -FullUri -ExpiryTime ((Get-Date).AddMinutes(15)) -StartTime ((Get-Date).AddMinutes(-1))
          Remove-AzAutomationModule -AutomationAccountName ${{ secrets.AutomationAccountName }} -Name ${{ secrets.ModuleName }} -ResourceGroupName ${{ secrets.AutomationRgName }} -Force -ErrorAction Ignore
          Start-Sleep 10
            New-AzAutomationModule -AutomationAccountName ${{ secrets.AutomationAccountName }} -Name ${{ secrets.ModuleName }} -ContentLink "$URL" -ResourceGroupName ${{ secrets.AutomationRgName }}

