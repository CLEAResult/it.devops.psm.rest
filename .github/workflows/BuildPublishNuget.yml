# This is a basic workflow to help you get started with Actions

name: CIBuild

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
#  push:
#    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Write Out Build Number
        run: |
          echo "Heres some output"
          echo $GITHUB_RUN_NUMBER
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.101
      - name: Update the ModuleVersion
        shell: pwsh
        run: |
          $ModuleVersion = $((get-date).Year.ToString() +"." + (get-date).Month.ToString() + "." + $ENV:GITHUB_RUN_NUMBER )
          Write-Output "ModuleVersion = $ModuleVersion"
          $Params = @{  ModuleVersion = $ModuleVersion }
          Update-ModuleManifest @Params -path "./cr-devops-rest.psd1"
      - name: Register PSGallery Repository
        shell: pwsh
        run: |
          Register-PSResourceRepository -PSGallery
      - name: Publish PowerShell Module
        uses: natescherer/publish-powershell-action@v1
        with:
          token: ${{ secrets.POWERSHELLGALLERY_API_KEY }}
          target: gallery
          path: ./  
      - name: Update .NET Core SDK
        shell: pwsh
        run: |
          sudo apt-get remove -y dotnet-sdk-* dotnet-runtime-* dotnet-host dotnet-host-*
          sudo apt-get autoremove -y

          sudo apt-get update
          sudo apt-get install -y gpg apt-transport-https wget
          
          # Add Microsoft package signing key
          wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
          
          # Use Ubuntu 18.04 repo if you're sure you're still on 18.04
          wget https://packages.microsoft.com/config/ubuntu/18.04/prod.list
          sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list
          sudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list
          
          # Install .NET 6 or 8
          sudo apt-get update
          sudo apt-get install -y dotnet-sdk-8.0
      - name: Install Mono
        run: sudo apt-get install -y mono-complete
      - name: Install Nuget
        uses: nuget/setup-nuget@v2
        with:
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
          nuget-version: '5.x'
      - name: Build the Nuget Package
        run: nuget pack ./cr-devops-rest.nuspec -Version 22.1.$GITHUB_RUN_NUMBER
      - name: Add the ADO Nuget Repo to the Nuget Sources File
        run: nuget sources Add -UserName Ryan.Phay@clearesult.com -Password ${{secrets.NUGET_API_KEY}} -Name CrDevOpsModules -Source https://clearesultdev.pkgs.visualstudio.com/_packaging/DevOps-PowerShell-Modules/nuget/v3/index.json
      - name: Push Nuget Package to Azure DevOps
        run: nuget push ./cr-devops-rest.22.1.$GITHUB_RUN_NUMBER.nupkg -apikey ${{secrets.NUGET_API_KEY}} -source https://clearesultdev.pkgs.visualstudio.com/_packaging/DevOps-PowerShell-Modules/nuget/v3/index.json
      - name: Create Zip Folder
        run: mkdir ./zip
      - name: Zip the files
        uses: montudor/action-zip@v0.1.1
        with:
          args: zip -qq -r ./zip/cr-devops-rest.zip ./
      - name: Deploy the Zipped Package to Azure
        uses: TravisSpomer/deploy-to-azure-storage@v1.3.0
        with:
          source-path: ./zip/
          sas-url: ${{ secrets.DEPLOY_SAS_URL }}
          container: devopsmodules
          require-index: false
          cleanup: false
      - name: Install Azure PowerShell Module
        shell: pwsh
        run: Install-Module -Name Az -AllowClobber -Scope CurrentUser -Force
      - name: Publish Module to Azure Automation
        shell: pwsh
        run: |
          $azureAplicationId = '${{ secrets.AZURE_APPLICATION_ID }}'
          echo $azureAplicationId
          $azureTenantId= '${{ secrets.AZURE_TENANTID }}'
          $azurePassword = ConvertTo-SecureString '${{ secrets.AZURE_ACCESSTOKEN }}' -AsPlainText -Force
          $psCred = New-Object System.Management.Automation.PSCredential($azureAplicationId , $azurePassword)
          Connect-AzAccount -Credential $psCred -TenantId $azureTenantId  -ServicePrincipal
          # Connect-AzAccount -CertificateThumbprint '${{ secrets.AZURE_THUMBPRINT }}' -ApplicationId '${{ secrets.AZURE_APPLICATION_ID }}' -Tenant '${{ secrets.AZURE_TENANTID }}' -Subscription '${{ secrets.AZURE_SUBSCRIPTION }}' -ServicePrincipal
          Set-AzContext -SubscriptionId '${{ secrets.PRODUCTIONSUBSCRIPTIONID }}'
          $SAC = New-AzStorageContext -StorageAccountName '${{ secrets.StorageAccountName }}' -StorageAccountKey '${{ secrets.StorageAccountAccessKey }}'
          $URL = New-AzStorageBlobSASToken -Container '${{ secrets.BlobContainer }}' -Blob '${{secrets.ModuleName}}.zip' -Permission "rwd" -context $SAC -FullUri -ExpiryTime ((Get-Date).AddMinutes(15)) -StartTime ((Get-Date).AddMinutes(-1))
          Remove-AzAutomationModule -AutomationAccountName '${{ secrets.AutomationAccountName }}' -Name '${{ secrets.ModuleName }}' -ResourceGroupName '${{ secrets.AutomationRgName }}' -Force -ErrorAction Ignore
          Start-Sleep 10
          New-AzAutomationModule -AutomationAccountName '${{ secrets.AutomationAccountName }}' -Name '${{ secrets.ModuleName }}' -ContentLink "$URL" -ResourceGroupName '${{ secrets.AutomationRgName }}'
